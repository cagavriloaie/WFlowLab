/****************************************************************************
** Meta object code from reading C++ file 'mainwindow.h'
**
** Created by: The Qt Meta Object Compiler version 68 (Qt 6.4.1)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <memory>
#include "../../../mainwindow.h"
#include <QtGui/qtextcursor.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'mainwindow.h' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 68
#error "This file was generated using the moc from 6.4.1. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

#ifndef Q_CONSTINIT
#define Q_CONSTINIT
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
namespace {
struct qt_meta_stringdata_MainWindow_t {
    uint offsetsAndSizes[52];
    char stringdata0[11];
    char stringdata1[33];
    char stringdata2[1];
    char stringdata3[23];
    char stringdata4[29];
    char stringdata5[19];
    char stringdata6[6];
    char stringdata7[29];
    char stringdata8[20];
    char stringdata9[18];
    char stringdata10[18];
    char stringdata11[24];
    char stringdata12[18];
    char stringdata13[21];
    char stringdata14[32];
    char stringdata15[33];
    char stringdata16[34];
    char stringdata17[14];
    char stringdata18[13];
    char stringdata19[21];
    char stringdata20[14];
    char stringdata21[19];
    char stringdata22[12];
    char stringdata23[16];
    char stringdata24[13];
    char stringdata25[6];
};
#define QT_MOC_LITERAL(ofs, len) \
    uint(sizeof(qt_meta_stringdata_MainWindow_t::offsetsAndSizes) + ofs), len 
Q_CONSTINIT static const qt_meta_stringdata_MainWindow_t qt_meta_stringdata_MainWindow = {
    {
        QT_MOC_LITERAL(0, 10),  // "MainWindow"
        QT_MOC_LITERAL(11, 32),  // "NumberOfWaterMetersChangedSignal"
        QT_MOC_LITERAL(44, 0),  // ""
        QT_MOC_LITERAL(45, 22),  // "meterTypeChangedSignal"
        QT_MOC_LITERAL(68, 28),  // "measurementTypeChangedSignal"
        QT_MOC_LITERAL(97, 18),  // "onMeterTypeChanged"
        QT_MOC_LITERAL(116, 5),  // "index"
        QT_MOC_LITERAL(122, 28),  // "onNumberOfWaterMetersChanged"
        QT_MOC_LITERAL(151, 19),  // "onNewSessionClicked"
        QT_MOC_LITERAL(171, 17),  // "onExitApplication"
        QT_MOC_LITERAL(189, 17),  // "onRbVolumeClicked"
        QT_MOC_LITERAL(207, 23),  // "onRbGavritmetricClicked"
        QT_MOC_LITERAL(231, 17),  // "onRbManualClicked"
        QT_MOC_LITERAL(249, 20),  // "onRbInterfaceClicked"
        QT_MOC_LITERAL(270, 31),  // "onAmbientTemperatureTextChanged"
        QT_MOC_LITERAL(302, 32),  // "onRelativeAirHumidityTextChanged"
        QT_MOC_LITERAL(335, 33),  // "onAthmosphericPressureTextCha..."
        QT_MOC_LITERAL(369, 13),  // "onSetRomanian"
        QT_MOC_LITERAL(383, 12),  // "onSetEnglish"
        QT_MOC_LITERAL(396, 20),  // "onGeneralDescription"
        QT_MOC_LITERAL(417, 13),  // "onShowLicense"
        QT_MOC_LITERAL(431, 18),  // "onWaterDensityPage"
        QT_MOC_LITERAL(450, 11),  // "onHelpAbout"
        QT_MOC_LITERAL(462, 15),  // "mousePressEvent"
        QT_MOC_LITERAL(478, 12),  // "QMouseEvent*"
        QT_MOC_LITERAL(491, 5)   // "event"
    },
    "MainWindow",
    "NumberOfWaterMetersChangedSignal",
    "",
    "meterTypeChangedSignal",
    "measurementTypeChangedSignal",
    "onMeterTypeChanged",
    "index",
    "onNumberOfWaterMetersChanged",
    "onNewSessionClicked",
    "onExitApplication",
    "onRbVolumeClicked",
    "onRbGavritmetricClicked",
    "onRbManualClicked",
    "onRbInterfaceClicked",
    "onAmbientTemperatureTextChanged",
    "onRelativeAirHumidityTextChanged",
    "onAthmosphericPressureTextChanged",
    "onSetRomanian",
    "onSetEnglish",
    "onGeneralDescription",
    "onShowLicense",
    "onWaterDensityPage",
    "onHelpAbout",
    "mousePressEvent",
    "QMouseEvent*",
    "event"
};
#undef QT_MOC_LITERAL
} // unnamed namespace

Q_CONSTINIT static const uint qt_meta_data_MainWindow[] = {

 // content:
      10,       // revision
       0,       // classname
       0,    0, // classinfo
      21,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       3,       // signalCount

 // signals: name, argc, parameters, tag, flags, initial metatype offsets
       1,    0,  140,    2, 0x06,    1 /* Public */,
       3,    0,  141,    2, 0x06,    2 /* Public */,
       4,    0,  142,    2, 0x06,    3 /* Public */,

 // slots: name, argc, parameters, tag, flags, initial metatype offsets
       5,    1,  143,    2, 0x08,    4 /* Private */,
       7,    1,  146,    2, 0x08,    6 /* Private */,
       8,    0,  149,    2, 0x08,    8 /* Private */,
       9,    0,  150,    2, 0x08,    9 /* Private */,
      10,    0,  151,    2, 0x08,   10 /* Private */,
      11,    0,  152,    2, 0x08,   11 /* Private */,
      12,    0,  153,    2, 0x08,   12 /* Private */,
      13,    0,  154,    2, 0x08,   13 /* Private */,
      14,    0,  155,    2, 0x08,   14 /* Private */,
      15,    0,  156,    2, 0x08,   15 /* Private */,
      16,    0,  157,    2, 0x08,   16 /* Private */,
      17,    0,  158,    2, 0x08,   17 /* Private */,
      18,    0,  159,    2, 0x08,   18 /* Private */,
      19,    0,  160,    2, 0x08,   19 /* Private */,
      20,    0,  161,    2, 0x08,   20 /* Private */,
      21,    0,  162,    2, 0x08,   21 /* Private */,
      22,    0,  163,    2, 0x08,   22 /* Private */,
      23,    1,  164,    2, 0x08,   23 /* Private */,

 // signals: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

 // slots: parameters
    QMetaType::Void, QMetaType::Int,    6,
    QMetaType::Void, QMetaType::Int,    6,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void, 0x80000000 | 24,   25,

       0        // eod
};

Q_CONSTINIT const QMetaObject MainWindow::staticMetaObject = { {
    QMetaObject::SuperData::link<QMainWindow::staticMetaObject>(),
    qt_meta_stringdata_MainWindow.offsetsAndSizes,
    qt_meta_data_MainWindow,
    qt_static_metacall,
    nullptr,
    qt_incomplete_metaTypeArray<qt_meta_stringdata_MainWindow_t,
        // Q_OBJECT / Q_GADGET
        QtPrivate::TypeAndForceComplete<MainWindow, std::true_type>,
        // method 'NumberOfWaterMetersChangedSignal'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'meterTypeChangedSignal'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'measurementTypeChangedSignal'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'onMeterTypeChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<int, std::false_type>,
        // method 'onNumberOfWaterMetersChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<int, std::false_type>,
        // method 'onNewSessionClicked'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'onExitApplication'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'onRbVolumeClicked'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'onRbGavritmetricClicked'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'onRbManualClicked'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'onRbInterfaceClicked'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'onAmbientTemperatureTextChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'onRelativeAirHumidityTextChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'onAthmosphericPressureTextChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'onSetRomanian'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'onSetEnglish'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'onGeneralDescription'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'onShowLicense'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'onWaterDensityPage'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'onHelpAbout'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'mousePressEvent'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<QMouseEvent *, std::false_type>
    >,
    nullptr
} };

void MainWindow::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        auto *_t = static_cast<MainWindow *>(_o);
        (void)_t;
        switch (_id) {
        case 0: _t->NumberOfWaterMetersChangedSignal(); break;
        case 1: _t->meterTypeChangedSignal(); break;
        case 2: _t->measurementTypeChangedSignal(); break;
        case 3: _t->onMeterTypeChanged((*reinterpret_cast< std::add_pointer_t<int>>(_a[1]))); break;
        case 4: _t->onNumberOfWaterMetersChanged((*reinterpret_cast< std::add_pointer_t<int>>(_a[1]))); break;
        case 5: _t->onNewSessionClicked(); break;
        case 6: _t->onExitApplication(); break;
        case 7: _t->onRbVolumeClicked(); break;
        case 8: _t->onRbGavritmetricClicked(); break;
        case 9: _t->onRbManualClicked(); break;
        case 10: _t->onRbInterfaceClicked(); break;
        case 11: _t->onAmbientTemperatureTextChanged(); break;
        case 12: _t->onRelativeAirHumidityTextChanged(); break;
        case 13: _t->onAthmosphericPressureTextChanged(); break;
        case 14: _t->onSetRomanian(); break;
        case 15: _t->onSetEnglish(); break;
        case 16: _t->onGeneralDescription(); break;
        case 17: _t->onShowLicense(); break;
        case 18: _t->onWaterDensityPage(); break;
        case 19: _t->onHelpAbout(); break;
        case 20: _t->mousePressEvent((*reinterpret_cast< std::add_pointer_t<QMouseEvent*>>(_a[1]))); break;
        default: ;
        }
    } else if (_c == QMetaObject::IndexOfMethod) {
        int *result = reinterpret_cast<int *>(_a[0]);
        {
            using _t = void (MainWindow::*)();
            if (_t _q_method = &MainWindow::NumberOfWaterMetersChangedSignal; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 0;
                return;
            }
        }
        {
            using _t = void (MainWindow::*)();
            if (_t _q_method = &MainWindow::meterTypeChangedSignal; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 1;
                return;
            }
        }
        {
            using _t = void (MainWindow::*)();
            if (_t _q_method = &MainWindow::measurementTypeChangedSignal; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 2;
                return;
            }
        }
    }
}

const QMetaObject *MainWindow::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *MainWindow::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_MainWindow.stringdata0))
        return static_cast<void*>(this);
    return QMainWindow::qt_metacast(_clname);
}

int MainWindow::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QMainWindow::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 21)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 21;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 21)
            *reinterpret_cast<QMetaType *>(_a[0]) = QMetaType();
        _id -= 21;
    }
    return _id;
}

// SIGNAL 0
void MainWindow::NumberOfWaterMetersChangedSignal()
{
    QMetaObject::activate(this, &staticMetaObject, 0, nullptr);
}

// SIGNAL 1
void MainWindow::meterTypeChangedSignal()
{
    QMetaObject::activate(this, &staticMetaObject, 1, nullptr);
}

// SIGNAL 2
void MainWindow::measurementTypeChangedSignal()
{
    QMetaObject::activate(this, &staticMetaObject, 2, nullptr);
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
